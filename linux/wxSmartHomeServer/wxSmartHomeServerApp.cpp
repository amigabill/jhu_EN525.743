/***************************************************************
 * Name:      wxSmartHomeServerApp.cpp
 * Purpose:   Code for Application Class
 * Author:    Bill Toner (wtoner1@jhu.edu)
 * Created:   2015-11-17
 * Copyright: Bill Toner ()
 * License:
 * Initially generated by wxSmith GUI builder tool
 **************************************************************/


//(*AppHeaders
#include "wxSmartHomeServerApp.h"
#include "wxSmartHomeServerMain.h"
#include <wx/image.h>
//#include <wx/textfile.h>
#include <wx/file.h>
//*)

//#include "shLinuxSerialPort.h
//shSerialPort mySHserverSerial = shSerialPort();

#define SH_CTRL_EVENT_LOG_FILENAME  (wxString)"/home/smarthome/.wxSmartHome/shEvents.log"


IMPLEMENT_APP(wxSmartHomeServerApp);

BEGIN_EVENT_TABLE(wxSmartHomeServerApp, wxApp)
   EVT_IDLE(wxSmartHomeServerApp::OnIdle)
END_EVENT_TABLE()


bool wxSmartHomeServerApp::OnInit()
{
    //(*AppInitialize
    bool wxsOK = true;
    wxInitAllImageHandlers();
    if ( wxsOK )
    {
//    	wxSmartHomeServerFrame* Frame = new wxSmartHomeServerFrame(0);
    	Frame = new wxSmartHomeServerFrame(0);
    	Frame->Show();
    	SetTopWindow(Frame);
    }
    //*)
    return wxsOK;

}



// Do something on an Idle event
// This is where our non-GUI "loop" will happen, such as
// to check on serial input form Zigbee, refresh the log file etc.
void wxSmartHomeServerApp::OnIdle(wxIdleEvent &event)
{
//    wxLogMessage( "In wxSmartHomeServerApp::OnIdle" ) ;

    /* ... */

    // check if a new Zigbee frame/SmartHome message has been received an dprocess it

    // check if a new Zigbee frame/SmartHome message is ready to send out

    // check if the SmartHome event log file has been updated,
    // and write new content to LCD display text area
    SHupdateGUIlogText(SH_CTRL_EVENT_LOG_FILENAME);


    if(IsMainLoopRunning())
        event.RequestMore();
}



// load the log file and refresh the SmartHome Server GUI with any new log content
uint8_t wxSmartHomeServerApp::SHupdateGUIlogText(const wxString& shLogFileName)
{
    #define SH_LOG_FILE_MAX_LINE_LENGTH 200

//    wxTextFile shLogFile;
    size_t i=0, shLogFileumLinesCurr=0;
//    wxString shLogFileTextLine = wxFile(0x00, SH_LOG_FILE_MAX_LINE_LENGTH);
    wxFile shLogFile(shLogFileName, wxFile::read);
//    wxString thisChar( (wxChar)0x00, 1 );
    wxUint8 thisChar[1];


    if( !shLogFile.IsOpened() )
    {
        return false;
    }



// TODO - change from wxTextFile to wxFile or wxFFile to save memory needs

//    wxLogMessage( "Entering SHupdateGUIlogText with log filename = %s", shLogFileName ) ;


    wxFileOffset shLogFileLength = shLogFile.Length();
    if( shLogFileLength == wxInvalidOffset )
    {
        return false;
    }

    if(shLogFileLength == shLogFileLengthPrev)
    {
        // no change in file size, assume no change to log since last check
        return true;
    }


    //
    while( (!shLogFile.Eof()) && (shLogFile.Tell() != wxInvalidOffset) )
    {
//        if( shLogFile.Tell() == wxInvalidOffset )
//        {
//            return false;
//        }

        wxString shLogFileTextLine( (wxChar)0x00, SH_LOG_FILE_MAX_LINE_LENGTH );

        i=0;
        do
        {
#if 1
            // read one char from file and add to current text line string
            shLogFile.Read( thisChar, 1 );
#endif
            shLogFileTextLine[i] = (wxChar)thisChar[0];

            i++;
        } while( (thisChar[0] != '\n') && (i<SH_LOG_FILE_MAX_LINE_LENGTH) && (!shLogFile.Eof()) && (shLogFile.Tell() != wxInvalidOffset) );
        shLogFileTextLine[i] = (wxChar)0x00; // make sure to add NULL char at end of text line

        Frame->TextCtrl1->AppendText(shLogFileTextLine);
    }

    shLogFileLengthPrev = shLogFileLength;
    //

return true;

#if 0
    if(shLogFile.Open(shLogFileName))
    {
        shLogFileumLinesCurr = i<shLogFile.GetLineCount();

        // check if the log file has changed since last time we checked, and refresh GUI if it did change
        if(shLogFileumLinesCurr != shLogFileumLinesPrev)
        {
            // Clear out the GUI wxTextCntrl area to be refreshed
            Frame->TextCtrl1->Clear();  // TODO rename TextCtrl1 to something more descriptive TODO

            // Append each line of the log file to the GUI wxTextCntrl area
            for(i=0; shLogFileumLinesCurr; i++)
            {
                shLogFileTextLine = shLogFile[i];
                shLogFileTextLine = shLogFileTextLine + "\n";
                Frame->TextCtrl1->AppendText(shLogFileTextLine);
            }
        }
    }

    shLogFileumLinesPrev = shLogFileumLinesCurr;
#endif
}


